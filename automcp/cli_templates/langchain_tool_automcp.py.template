import warnings
from typing import Any
from auto_mcp.adapters.langchain_tool_adapter import create_langchain_tool_adapter
from pydantic import BaseModel
from mcp.server.fastmcp import FastMCP

# Create MCP server
mcp = FastMCP("MCP Server")

# Suppress warnings that might interfere with STDIO transport
warnings.filterwarnings("ignore")

# You'll need to replace these imports with your actual crew class
# from your_module import YourCrewClass

# Define the input schema for your crew
class InputSchema(BaseModel):
    # Replace these with your actual input parameters
    parameter1: str
    parameter2: str
    # Add more parameters as needed

name = "Your Tool Name"
description = "Description of what your tool does"

# Create an adapter for Langchain
mcp_langchain_tool = create_langchain_tool_adapter(
    tool_instance=YourToolClass,
    name=name,
    description=description,
    input_schema=InputSchema,
    run_func="run", # Optional, this is the method to call on the tool instance
)

mcp.add_tool(
    tool=mcp_langchain_tool,
    name=name,
    description=description
)

# Server entrypoints
def serve_sse():
    mcp.run(transport="sse")

def serve_stdio():
    # Redirect stderr to suppress warnings that bypass the filters
    import os
    import sys

    class NullWriter:
        def write(self, *args, **kwargs):
            pass
        def flush(self, *args, **kwargs):
            pass

    # Save the original stderr
    original_stderr = sys.stderr

    # Replace stderr with our null writer to prevent warnings from corrupting STDIO
    sys.stderr = NullWriter()

    # Set environment variable to ignore Python warnings
    os.environ["PYTHONWARNINGS"] = "ignore"

    try:
        mcp.run(transport="stdio")
    finally:
        # Restore stderr for normal operation
        sys.stderr = original_stderr

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1 and sys.argv[1] == "sse":
        serve_sse()
    else:
        serve_stdio() 